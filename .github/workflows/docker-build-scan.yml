name: Build and DevSecOps Scan

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t cloud-native-app .

      - name: Save Docker Image to tar
        run: docker save cloud-native-app -o cloud-native-app.tar

      - name: Upload image tarball as artifact
        uses: actions/upload-artifact@v3
        with:
          name: cloud-native-app-image
          path: cloud-native-app.tar

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: cloud-native-app-image
          path: .

      - name: Load Docker image
        run: docker load -i cloud-native-app.tar

      - name: Run Unit Tests
        run: docker run --rm cloud-native-app pytest tests/unit

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: cloud-native-app-image
          path: .

      - name: Load Docker image
        run: docker load -i cloud-native-app.tar

      - name: Run Integration Tests
        run: docker run --rm cloud-native-app pytest tests/integration

  trivy-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: cloud-native-app-image
          path: .

      - name: Load Docker image
        run: docker load -i cloud-native-app.tar

      - name: Install Trivy
        run: |
          sudo apt update
          sudo apt install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt update
          sudo apt install trivy -y

      - name: Scan Docker Image
        run: trivy image --severity CRITICAL,HIGH cloud-native-app


  bandit-sast:
    runs-on: ubuntu-latest
    needs: build  # Run after the build job completes
    steps:
      # Step 1: Install Bandit (Python SAST Tool)
      - name: Install Bandit
        run: pip install bandit

      # Step 2: Run Bandit on app.py for Static Code Analysis
      - name: Run Bandit SAST
        run: bandit -r app.py -f json -o bandit-report.json

      # Step 3: Upload Bandit report as an artifact
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4

        with:
          name: bandit-report
          path: bandit-report.json

  gitleaks-secret-scan:
    runs-on: ubuntu-latest
    needs: build  # Run after the build job completes
    steps:
      # Step 1: Install Gitleaks for secret scanning
      - name: Install Gitleaks
        run: |
          wget https://github.com/zricethezav/gitleaks/releases/download/v7.5.0/gitleaks-linux-amd64 -O /usr/local/bin/gitleaks
          chmod +x /usr/local/bin/gitleaks

      # Step 2: Run Gitleaks to detect secrets
      - name: Run Gitleaks Secret Detection
        run: gitleaks detect --path . --verbose --redact

  checkov-iac-scan:
    runs-on: ubuntu-latest
    needs: build  # Run after the build job completes
    steps:
      # Step 1: Install Checkov for Infrastructure as Code scanning
      - name: Install Checkov
        run: |
          pip install checkov

      # Step 2: Run Checkov on IaC files (e.g., Dockerfile, Kubernetes configurations)
      - name: Run Checkov IaC scan
        run: checkov -d . --compact

  notify_failure:
    runs-on: ubuntu-latest
    if: failure()  # Only run if the previous jobs fail
    steps:
      # Step 1: Notify failure (you can replace this with an actual notification integration like Slack)
      - name: Notify failure
        run: echo "Security issues found! Check the pipeline report."
