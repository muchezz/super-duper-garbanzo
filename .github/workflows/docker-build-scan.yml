stages:
  - build
  - scan
  - sast
  - secret-scan
  - iac-scan

variables:
  DOCKER_IMAGE: "cloud-native-app:latest"
  # Define any other necessary variables here, like GitLab token or registry login credentials if needed

# Stage 1: Build Docker Image
build:
  stage: build
  script:
    - docker build -t $DOCKER_IMAGE .
  artifacts:
    paths:
      - $DOCKER_IMAGE
  only:
    - main  # or master if you prefer

# Stage 2: Docker Image Scan (Trivy)
trivy-scan:
  stage: scan
  image: aquasec/trivy:latest
  script:
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $DOCKER_IMAGE
  allow_failure: false  # If you want the pipeline to fail if security issues are found
  only:
    - main

# Stage 3: Python SAST (Bandit)
bandit-sast:
  stage: sast
  image: python:3.9
  before_script:
    - pip install bandit
  script:
    - bandit -r app.py -f json -o bandit-report.json
  artifacts:
    paths:
      - bandit-report.json
  allow_failure: false
  only:
    - main

# Stage 4: Secret Detection (Gitleaks)
gitleaks:
  stage: secret-scan
  image: zricethezav/gitleaks:latest
  script:
    - gitleaks detect --source . --verbose --redact
  allow_failure: false
  only:
    - main

# Stage 5: IaC Scan (Checkov)
checkov:
  stage: iac-scan
  image: bridgecrew/checkov:latest
  script:
    - checkov -d . --compact
  allow_failure: false
  only:
    - main

# Optional: GitLab Notifications (Example)
# Notify on failure (you can use Slack, email, or GitLab notifications)
notify_failure:
  stage: deploy
  script:
    - echo "Security issues found! Check the pipeline report."
  when: on_failure
  only:
    - main
